For instance, the required folder is on Desktop
// Basic gitBash/Terminal commands will be as follows:

$ clear
$ q
$ CTRL+C
$ stop
$ cd                                                              // Path
$ cd ..                                                           //
$ cd ~                                                            // Home
$ ls                                                              // Files contained
$ ls -la                                                          // Hidden Files view

$ git config --global.user.name "Vatsal Salla"                    // Account setup
$ git config --global.user.name                                   // Press Enter to view
$ git config --global.user.email "Type the email here"            // Press Enter to view
$ git config --list

// WORKING COPY >> STAGING AREA >> CORRECTING FILES
// EDIT >> MODIFY >> ADD >> COMMIT

$ git help                                                        // Help
$ git init                                                        // Initialize Repository/Project
$ git add .                                                       // Add all the files to staging area
$ git add fileName                                                // Add a single file to staging area
$ git commit -m "Comments to remember the point of time"          // This is to store the point of time
$ git commit -am "To commit everything"
$ git log                                                         // View commit history
$ git log --author = "authorName"                                 // View specific Author's commit
$ git status                                                      // Compare repository and main directory
$ git diff                                                        // View the changes in Bash
$ git reset HEAD fileName                                         // Unstage 

// Renaming Files

$ git rm fileName                                                 // Remove the file from both the places
$ git add renameIt                                                // Renaming in the main repository
$ git rm oldFileName                                              // Remove old file

// Moving Files

$ git oldFileName newFileName                                     // Renaming made easy
$ git checkout --fileName                                         // Check the file
$ git checkout commitNumber --index                               // First >> Second >> Third >> Second

// Creating files

$ touch fileName                                                 // Make a text file especially .gitignore

// Setting up a remote means to set-up a connection between the local computer and Online

$ git remote add nickName "Link"
$ git remote
$ git push -u nickName master

/* .gitignore is made to get rid of the unnecessary files while commiting. Type names of files in .gitignore
    Changes are made and are committed through the GUI
    CMD + SHIFT + . to view hidden files (.gitignore)
    
    To share any repository: 
    It is of the format https:// github . com / gitHubUserName / repositoryName
